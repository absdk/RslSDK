<#@ template language="C#" HostSpecific="True"  inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="EnvDTE" #>
<#@ assembly name="E:\Development\R&D\SoftwareGrid\trunk\SourceCode\SoftwareGrid.DataLogic\bin\Debug\SoftwareGrid.DataLogic.dll" #>
<# 
string assemblyPath=Host.TemplateFile; 
assemblyPath=assemblyPath.Substring(0,assemblyPath.IndexOf("packages"));
assemblyPath=assemblyPath+@"SoftwareGrid.DataLogic\bin\Debug\SoftwareGrid.DataLogic.dll";
#>
//*********************************************************
//
//    Copyright (c) SoftwareGrid LLC. All rights reserved.
//	  Contact: Faisal Alam, sal@softwaregrid.com
//	  http://www.softwaregrid.com
//
//*********************************************************

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
<# if(!string.IsNullOrEmpty(Model.ModelTypeNamespace)) { #>
using <#= Model.ModelTypeNamespace #>;
<# } #>
<# if((!string.IsNullOrEmpty(Model.RepositoriesNamespace)) && (Model.RepositoriesNamespace != Model.ModelTypeNamespace)) { #>
using <#= Model.RepositoriesNamespace #>;
<# } #>
using SoftwareGrid.BusinessLogic.Helpers;
namespace <#= Model.ControllerNamespace #>
{   
<#  
	var modelType = (CodeType)Model.ModelType; 
	var modelName = modelType.Name; 
	var modelNamePlural = Model.ModelTypePluralized; 
	var modelVariable = modelName.ToLower(); 
	var relatedEntities = ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>();
	var primaryKeyProperty = modelType.VisibleMembers().OfType<CodeProperty>().Single(x => x.Name == Model.PrimaryKey);
	var routingName = Regex.Replace(Model.ControllerName, "Controller$", "", RegexOptions.IgnoreCase);
	var baseControllerName="Controller";
	if(Model.BaseControllerName!=null && Model.BaseControllerName!="")
	{
		baseControllerName=Model.BaseControllerName;
	}

	List<SoftwareGrid.DataLogic.Attributes.IncludeInList> searchColumnList=new List<SoftwareGrid.DataLogic.Attributes.IncludeInList>();
	Assembly asm = Assembly.LoadFile(assemblyPath);
	Type type = asm.GetType(modelType.FullName);
	if(type!=null)
	{
		PropertyInfo[] propertyList = type.GetProperties();
		if(propertyList!=null)
		{
			foreach (PropertyInfo currentProperty in propertyList)
			{
				object[] attributes = currentProperty.GetCustomAttributes(typeof(SoftwareGrid.DataLogic.Attributes.IncludeInList), false);
			    if (attributes != null)
			    {
					foreach (object currentAttribute in attributes)
			        {
			            SoftwareGrid.DataLogic.Attributes.IncludeInList includeListAttribute=(SoftwareGrid.DataLogic.Attributes.IncludeInList)currentAttribute;
						if(includeListAttribute.AllowSearch)
						{
							includeListAttribute.ColumnName=currentProperty.Name;
							searchColumnList.Add(includeListAttribute);
						}
			        }
			    }
			}
		}
	}

#>
    public class <#= Model.ControllerName #> : <#= baseControllerName #>
    {
<# foreach(var repository in Repositories.Values) { #>
		private readonly I<#= repository.RepositoryTypeName #> <#= repository.VariableName #>;
<# } #>
        public <#= Model.ControllerName #>(<#= String.Join(", ", Repositories.Values.Select(x => "I" + x.RepositoryTypeName + " " + x.VariableName)) #>)
        {
<# foreach(var repository in Repositories.Values) { #>
			this.<#= repository.VariableName #> = <#= repository.VariableName #>;
<# } #>
        }

        //
        // GET: /<#= routingName #>/
		[UserAuthorize]
        public ViewResult Index()
        {
			<#
				var propertiesToInclude = relatedEntities.Select(relation => relation.LazyLoadingProperty).Where(x => x != null);
				var includeExpression = String.Join(", ", propertiesToInclude.Select(x => String.Format("{0} => {0}.{1}", modelVariable, x.Name)));
				if (!string.IsNullOrEmpty(includeExpression)) {
					includeExpression = "Including(" + includeExpression + ")";
				}
			#>
			<# 
			foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) 
			{	
				bool addViewBag=false;
				if(searchColumnList!=null)
				{
					foreach(SoftwareGrid.DataLogic.Attributes.IncludeInList currentColumn in searchColumnList)
					{
						if(currentColumn.ColumnName==relatedEntity.RelatedEntityType.Name+"ID")
						{
							addViewBag=true;
							break;
						}
					}
				}
				if(addViewBag)
				{
			#>
			ViewBag.Possible<#= relatedEntity.RelationNamePlural #> = <#= Repositories[relatedEntity.RelatedEntityType.FullName].VariableName #>.All;
			<# 
				}
			} 
			#>
            return View(<#= Repositories[modelType.FullName].VariableName #>.All<#= includeExpression #>);
        }
		
		public ViewResult Search(<#= modelName #> search<#= modelName #>)
        {
			if(search<#= modelName #>!=null)
			{
				<# 
				foreach(SoftwareGrid.DataLogic.Attributes.IncludeInList currentColumn in searchColumnList)
				{
				#>
			ViewData["<#= currentColumn.ColumnName #>"]=search<#= modelName #>.<#= currentColumn.ColumnName #>;
				<# 
				}
				#>
			}
			<# 
			foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) 
			{	
				bool addViewBag=false;
				if(searchColumnList!=null)
				{
					foreach(SoftwareGrid.DataLogic.Attributes.IncludeInList currentColumn in searchColumnList)
					{
						if(currentColumn.ColumnName==relatedEntity.RelatedEntityType.Name+"ID")
						{
							addViewBag=true;
							break;
						}
					}
				}
				if(addViewBag)
				{
			#>
			ViewBag.Possible<#= relatedEntity.RelationNamePlural #> = <#= Repositories[relatedEntity.RelatedEntityType.FullName].VariableName #>.All;
			<# 
				}
			} 
			#>
			return View("Index",<#= Repositories[modelType.FullName].VariableName #>.All<#= includeExpression #>);
		}

        //
        // GET: /<#= routingName #>/Details/5
		[UserAuthorize]
        public ViewResult Details(<#= primaryKeyProperty.Type.AsString #> id)
        {
            return View(<#= Repositories[modelType.FullName].VariableName #>.Find(id));
        }

        //
        // GET: /<#= routingName #>/Create
		[UserAuthorize]
        public ActionResult Create()
        {
			<#= modelName #> <#= modelVariable #> = new <#= modelName #>();
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { if(relatedEntity.RelationNamePlural!="States" && !relatedEntity.RelationNamePlural.Contains("Users") )	{ #>
			ViewBag.Possible<#= relatedEntity.RelationNamePlural #> = <#= Repositories[relatedEntity.RelatedEntityType.FullName].VariableName #>.All;
<# } } #>
            return View(<#= modelVariable #>);
        } 

        //
        // POST: /<#= routingName #>/Create
        [HttpPost]
        public ActionResult Create(<#= modelName #> <#= modelVariable #>)
        {
            if (ModelState.IsValid) {
                <#= Repositories[modelType.FullName].VariableName #>.InsertOrUpdate(<#= modelVariable #>);
                <#= Repositories[modelType.FullName].VariableName #>.Save();
                return RedirectToAction("Index");
            } else {
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { if(relatedEntity.RelationNamePlural!="States" && !relatedEntity.RelationNamePlural.Contains("Users") )	{ #>
				ViewBag.Possible<#= relatedEntity.RelationNamePlural #> = <#= Repositories[relatedEntity.RelatedEntityType.FullName].VariableName #>.All;
<# } } #>
				return View(<#= modelVariable #>);
			}
        }
        
        //
        // GET: /<#= routingName #>/Edit/5
		[UserAuthorize]
        public ActionResult Edit(<#= primaryKeyProperty.Type.AsString #> id)
        {
<#= modelName #> <#= modelVariable #> = <#= Repositories[modelType.FullName].VariableName #>.Find(id);
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { if(!relatedEntity.RelationNamePlural.Contains("Users") ) {  #>
			<# if(relatedEntity.RelationNamePlural=="States") { #>
			if (<#= modelVariable #>.CountryID.HasValue)
            {
                ViewBag.PossibleStates = stateRepository.FindAllByCountryID(<#= modelVariable #>.CountryID.Value);
            }
			<# } else { #>
			ViewBag.Possible<#= relatedEntity.RelationNamePlural #> = <#= Repositories[relatedEntity.RelatedEntityType.FullName].VariableName #>.All;
<# } } } #>
             return View(<#= modelVariable #>);
        }

        //
        // POST: /<#= routingName #>/Edit/5
        [HttpPost]
        public ActionResult Edit(<#= modelName #> <#= modelVariable #>)
        {
            if (ModelState.IsValid) {
                <#= Repositories[modelType.FullName].VariableName #>.InsertOrUpdate(<#= modelVariable #>);
                <#= Repositories[modelType.FullName].VariableName #>.Save();
                return RedirectToAction("Index");
            } else {
<# foreach(var relatedEntity in relatedEntities.Where(x => x.RelationType == RelationType.Parent)) { if(!relatedEntity.RelationNamePlural.Contains("Users") ) {  #>
			<# if(relatedEntity.RelationNamePlural=="States") { #>
			if (<#= modelVariable #>.CountryID.HasValue)
            {
                ViewBag.PossibleStates = stateRepository.FindAllByCountryID(<#= modelVariable #>.CountryID.Value);
            }
			<# } else { #>
			ViewBag.Possible<#= relatedEntity.RelationNamePlural #> = <#= Repositories[relatedEntity.RelatedEntityType.FullName].VariableName #>.All;
<# } } } #>
				return View(<#= modelVariable #>);
			}
        }

        //
        // GET: /<#= routingName #>/Delete/5
		[UserAuthorize]
        public ActionResult Delete(<#= primaryKeyProperty.Type.AsString #> id)
        {
            return View(<#= Repositories[modelType.FullName].VariableName #>.Find(id));
        }

        //
        // POST: /<#= routingName #>/Delete/5

        [HttpPost, ActionName("Delete")]
        public ActionResult DeleteConfirmed(<#= primaryKeyProperty.Type.AsString #> id)
        {
            <#= Repositories[modelType.FullName].VariableName #>.Delete(id);
            <#= Repositories[modelType.FullName].VariableName #>.Save();

            return RedirectToAction("Index");
        }
    }
}

<#+
class RepositoryInfo {
    public string RepositoryTypeName { get; set; }
    public string VariableName { get; set; }
}

IDictionary<string, RepositoryInfo> _repositories;
IDictionary<string, RepositoryInfo> Repositories {
	get {
		if (_repositories == null) {
			var relatedEntities = ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>();
			var relatedTypes = relatedEntities.Where(x => x.RelationType == RelationType.Parent).Select(x => x.RelatedEntityType).Distinct();
			_repositories = relatedTypes.ToDictionary(
				relatedType => relatedType.FullName,
				relatedType => new RepositoryInfo { RepositoryTypeName = relatedType.Name + "Repository", VariableName = relatedType.Name.ToLower() + "Repository" }
			); 
			_repositories[((CodeType)Model.ModelType).FullName] = new RepositoryInfo { RepositoryTypeName = Model.Repository, VariableName = ((CodeType)Model.ModelType).Name.ToLower() + "Repository" };
		}
		return _repositories;
	}
}
#>