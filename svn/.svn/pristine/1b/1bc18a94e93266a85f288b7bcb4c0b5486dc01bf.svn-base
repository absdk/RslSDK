<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output extension="cshtml" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>

<# 
var viewDataType = (EnvDTE.CodeType) Model.ViewDataType; 
List<ModelProperty> modelProperties=GetModelProperties(Model.ViewDataType, false);
#>
<# if(viewDataType != null) { #>
@model <#= viewDataType.FullName #>
<# } #>
@* This partial view defines form fields that will appear when creating and editing entities *@
<#
foreach (ModelProperty property in modelProperties) {
    if (property.Name=="CountryID") {
#>
@using SoftwareGrid.DataLogic.Models
@{
    Country selectedCountry = new Country();
    if(Model.CountryID.HasValue)
    {
        selectedCountry.CountryID = Model.CountryID.Value;
    }
    State selectedState = new State();
    if (Model.StateID.HasValue)
    {
        selectedState.StateID = Model.StateID.Value;
    }
}
<# } } #>
	<fieldset>
		@Html.ValidationSummary()
<#
foreach (ModelProperty property in modelProperties) {
    if (!property.IsPrimaryKey && !property.IsForeignKey && !property.IsReadOnly) {
#>		
		<div class="form-item">
            @Html.LabelFor(model => model.<#= property.Name #>)
            <div>
				<#
				if (property.Type.AsFullName==string.Empty) {
				#>
				@(Html.Telerik().Upload()
                        .Name("<#= property.Name #>")
                        .Async(async => async
                            .Save("UploadFile", "<#= viewDataType.Name #>")
                            .Remove("RemoveFile", "<#= viewDataType.Name #>"))
                )
				<#
				}
				else
				{
				#>
				@Html.EditorFor(model => model.<#= property.Name #>)
				<#
				}
				#>
            </div>
			<#
			if (property.IsRequired) {
			#>		
			<div class="required_tag"></div>
			<#
			}
			#>
		</div>
<#
    }
	else if(property.IsForeignKey)
	{
		foreach (RelatedEntityInfo relation in ParentRelations) 
		{
			if(property.Name==relation.RelationProperty.Name)
			{		
				if (property.Name=="CountryID")
				{
				#>
				@Html.Partial(SoftwareGrid.Common.Constants.PartialViews.DropDownList_Country, selectedCountry)
				<#
				}
				else if (property.Name=="StateID")
				{
				#>
				<div id="divCountryID">
					@Html.Partial(SoftwareGrid.Common.Constants.PartialViews.DropDownList_State, selectedState)
				</div>
				<#
				}
				else
				{
				#>
			<div class="form-item">
			@Html.LabelFor(model => model.<#= property.Name #>)
			<div class="editor-field">
			    @Html.DropDownListFor(model => model.<#= relation.RelationProperty.Name #>, ((IEnumerable<<#= relation.RelatedEntityType.FullName #>>)ViewBag.Possible<#= relation.RelationNamePlural #>).Select(option => new SelectListItem {
			        Text = <#= GetValueExpression("option", relation.RelatedEntityType) #>, 
			        Value = option.<#= relation.RelatedEntityPrimaryKeyName #>.ToString(),
			        Selected = (Model != null) && (option.<#= relation.RelatedEntityPrimaryKeyName #> == Model.<#= relation.RelationProperty.Name #>)
			    }), "Choose...")
			</div>
			<#
			if (property.IsRequired) {
		#><div class="required_tag"></div>
			<#
			}
			#>
			</div>
			<#
			}
				break;
			}
		}	
	}
}
#>	
		<div class="form-item">
			<div class="button_bar clearfix">
				<button class="green" type="submit">
						<span>Submit</span>
				</button>
			</div>
		</div>
	</fieldset>
<#+
// Describes the information about a property on the model
class ModelProperty {
    public string Name { get; set; }
    public string ValueExpression { get; set; }
	public EnvDTE.CodeTypeRef Type { get; set; }
    public bool IsPrimaryKey { get; set; }
	public bool IsForeignKey { get; set; }
	public bool IsReadOnly { get; set; }
	public bool IsRequired { get; set; }
	public bool IsList { get; set; }
}

// Change this list to include any non-primitive types you think should be eligible to be edited using a textbox
static Type[] bindableNonPrimitiveTypes = new[] {
	typeof(int),
    typeof(string),
    typeof(decimal),
	typeof(double),
	typeof(byte),
    typeof(Guid),
    typeof(DateTime),
    typeof(DateTimeOffset),
    typeof(TimeSpan),
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {
    List<ModelProperty> results = GetEligibleProperties(typeInfo, includeUnbindableProperties);
    
    foreach (ModelProperty prop in results) {
        if (prop.Type.UnderlyingTypeIs<double>() || prop.Type.UnderlyingTypeIs<decimal>()) {
            prop.ValueExpression = "String.Format(\"{0:F}\", " + prop.ValueExpression + ")";
        }
        else if (prop.Type.UnderlyingTypeIs<DateTime>()) {
            prop.ValueExpression = "String.Format(\"{0:g}\", " + prop.ValueExpression + ")";
        }
		else if (!IsBindableType(prop.Type)) {
			prop.ValueExpression = GetValueExpression("Model." + prop.Name, (EnvDTE.CodeType)prop.Type.CodeType);
		}
    }

    return results;
}

// Change this list to include the names of properties that should be selected to represent an entity as a single string
static string[] displayPropertyNames = new[] { "Name", "Title", "LastName", "Surname", "Subject", "Count" };

string GetValueExpression(string propertyExpression, EnvDTE.CodeType propertyType) {
	if (propertyType != null) {
		var chosenSubproperty = propertyType.DisplayColumnProperty() ?? propertyType.FindProperty(displayPropertyNames);
		if (chosenSubproperty != null) {
			var toStringSuffix = chosenSubproperty.Type.AsFullName == "System.String" ? "" : ".ToString()";
			return String.Format("({0} == null ? \"None\" : {0}.{1}{2})", propertyExpression, chosenSubproperty.Name, toStringSuffix);
		}
	}
	return "Html.DisplayTextFor(_ => " + propertyExpression + ").ToString()";
}

// Helper
List<ModelProperty> GetEligibleProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {
    List<ModelProperty> results = new List<ModelProperty>();
	if (typeInfo != null) {
		foreach (var prop in typeInfo.VisibleMembers().OfType<EnvDTE.CodeProperty>()) {
			bool isRequired=false;
			bool isList=false;
			var attributes = prop.Attributes.OfType<CodeAttribute2>();
			if(attributes!=null)
			{
				var requiredAttributes = attributes.FirstOrDefault(x => x.Name == "Required");
				if(requiredAttributes!=null)
				{
					isRequired=true;
				}
				//var listAttributes = attributes.FirstOrDefault(x => x.Name == "IncludeInList");
				//if(listAttributes!=null)
				//{
				//	isList=true;
				//}
			}
			
			if (prop.IsReadable() && !prop.HasIndexParameters() && (includeUnbindableProperties || IsBindableType(prop.Type))) {
				results.Add(new ModelProperty {
					Name = prop.Name,
					ValueExpression = "Model." + prop.Name,
					Type = prop.Type,
					IsPrimaryKey = Model.PrimaryKeyName == prop.Name,
					IsForeignKey = ParentRelations.Any(x => x.RelationProperty == prop),
					IsReadOnly = !prop.IsWriteable(),
					IsRequired = isRequired,
					IsList=isList
				});
			}
		}
	}

    return results;
}

IEnumerable<RelatedEntityInfo> ParentRelations {
	get { return ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>().Where(x => x.RelationType == RelationType.Parent); }
}

// Helper
bool IsBindableType(EnvDTE.CodeTypeRef type) {
    return type.UnderlyingIsPrimitive() || bindableNonPrimitiveTypes.Any(x => type.UnderlyingTypeIs(x)) || type.AsFullName==string.Empty;
}

public string FixName(string propName)
{
	if (propName.ToLower() != "id" && propName.ToLower().EndsWith("id"))
	{
		propName = propName.Replace("Id","").Replace("ID","");
	}
	return Regex.Replace(propName,"([A-Z])"," $1",RegexOptions.Compiled).Trim();
}
#>