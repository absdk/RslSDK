
@model SoftwareGrid.DataLogic.Models.Contact

@* This partial view defines form fields that will appear when creating and editing entities *@

	<fieldset>
		@Html.ValidationSummary()
		<div class="form-item">
			@Html.LabelFor(model => model.CompanyID)
			<div class="editor-field">
			    @Html.DropDownListFor(model => model.CompanyID, ((IEnumerable<SoftwareGrid.DataLogic.Models.Company>)ViewBag.PossibleCompanies).Select(option => new SelectListItem {
			        Text = Html.DisplayTextFor(_ => option).ToString(), 
			        Value = option.CompanyID.ToString(),
			        Selected = (Model != null) && (option.CompanyID == Model.CompanyID)
			    }), "Choose...")
			</div>
			</div>
				
		<div class="form-item">
            @Html.LabelFor(model => model.CompanyName)
            <div>
								@Html.EditorFor(model => model.CompanyName)
				            </div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.FirstName)
            <div>
								@Html.EditorFor(model => model.FirstName)
				            </div>
					
			<div class="required_tag"></div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.MiddleName)
            <div>
								@Html.EditorFor(model => model.MiddleName)
				            </div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.LastName)
            <div>
								@Html.EditorFor(model => model.LastName)
				            </div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.FullName)
            <div>
								@Html.EditorFor(model => model.FullName)
				            </div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.JobTitle)
            <div>
								@Html.EditorFor(model => model.JobTitle)
				            </div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.Department)
            <div>
								@Html.EditorFor(model => model.Department)
				            </div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.Address1)
            <div>
								@Html.EditorFor(model => model.Address1)
				            </div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.Address2)
            <div>
								@Html.EditorFor(model => model.Address2)
				            </div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.City)
            <div>
								@Html.EditorFor(model => model.City)
				            </div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.PostBoxNumber)
            <div>
								@Html.EditorFor(model => model.PostBoxNumber)
				            </div>
					</div>
		<div class="form-item">
			@Html.LabelFor(model => model.CountryID)
			<div class="editor-field">
			    @Html.DropDownListFor(model => model.CountryID, ((IEnumerable<SoftwareGrid.DataLogic.Models.Country>)ViewBag.PossibleCountries).Select(option => new SelectListItem {
			        Text = (option == null ? "None" : option.Name), 
			        Value = option.CountryID.ToString(),
			        Selected = (Model != null) && (option.CountryID == Model.CountryID)
			    }), "Choose...")
			</div>
			</div>
				<div class="form-item">
			@Html.LabelFor(model => model.StateID)
			<div class="editor-field">
			    @Html.DropDownListFor(model => model.StateID, ((IEnumerable<SoftwareGrid.DataLogic.Models.State>)ViewBag.PossibleStates).Select(option => new SelectListItem {
			        Text = (option == null ? "None" : option.Name), 
			        Value = option.StateID.ToString(),
			        Selected = (Model != null) && (option.StateID == Model.StateID)
			    }), "Choose...")
			</div>
			</div>
				
		<div class="form-item">
            @Html.LabelFor(model => model.ZipCode)
            <div>
								@Html.EditorFor(model => model.ZipCode)
				            </div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.OfficePhone)
            <div>
								@Html.EditorFor(model => model.OfficePhone)
				            </div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.Mobile)
            <div>
								@Html.EditorFor(model => model.Mobile)
				            </div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.FaxNumber)
            <div>
								@Html.EditorFor(model => model.FaxNumber)
				            </div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.EmailAddress)
            <div>
								@Html.EditorFor(model => model.EmailAddress)
				            </div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.IsEmailSubscriber)
            <div>
								@Html.EditorFor(model => model.IsEmailSubscriber)
				            </div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.IsEmailValidated)
            <div>
								@Html.EditorFor(model => model.IsEmailValidated)
				            </div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.AlternativeEmail)
            <div>
								@Html.EditorFor(model => model.AlternativeEmail)
				            </div>
					</div>
		<div class="form-item">
			@Html.LabelFor(model => model.ContactProfessionTypeID)
			<div class="editor-field">
			    @Html.DropDownListFor(model => model.ContactProfessionTypeID, ((IEnumerable<SoftwareGrid.DataLogic.Models.ContactProfessionType>)ViewBag.PossibleContactProfessionTypes).Select(option => new SelectListItem {
			        Text = (option == null ? "None" : option.Name), 
			        Value = option.ContactProfessionTypeID.ToString(),
			        Selected = (Model != null) && (option.ContactProfessionTypeID == Model.ContactProfessionTypeID)
			    }), "Choose...")
			</div>
			</div>
				
		<div class="form-item">
            @Html.LabelFor(model => model.LinkedInProfileAddress)
            <div>
								@Html.EditorFor(model => model.LinkedInProfileAddress)
				            </div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.FacebokProfileAddress)
            <div>
								@Html.EditorFor(model => model.FacebokProfileAddress)
				            </div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.TwitterAccount)
            <div>
								@Html.EditorFor(model => model.TwitterAccount)
				            </div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.GooglePlusAccountAddress)
            <div>
								@Html.EditorFor(model => model.GooglePlusAccountAddress)
				            </div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.PersonalBlogAddress)
            <div>
								@Html.EditorFor(model => model.PersonalBlogAddress)
				            </div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.Photo)
            <div>
								@(Html.Telerik().Upload()
                        .Name("Photo")
                        .Async(async => async
                            .Save("UploadFile", "Contact")
                            .Remove("RemoveFile", "Contact"))
                )
				            </div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.InternalRemarks)
            <div>
								@Html.EditorFor(model => model.InternalRemarks)
				            </div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.ContactProfile)
            <div>
								@Html.EditorFor(model => model.ContactProfile)
				            </div>
					</div>
		<div class="form-item">
			@Html.LabelFor(model => model.ContactRatingScaleID)
			<div class="editor-field">
			    @Html.DropDownListFor(model => model.ContactRatingScaleID, ((IEnumerable<SoftwareGrid.DataLogic.Models.RatingScale>)ViewBag.PossibleContactRatingScales).Select(option => new SelectListItem {
			        Text = (option == null ? "None" : option.Name), 
			        Value = option.RatingScaleID.ToString(),
			        Selected = (Model != null) && (option.RatingScaleID == Model.ContactRatingScaleID)
			    }), "Choose...")
			</div>
			</div>
				
		<div class="form-item">
            @Html.LabelFor(model => model.SequenceInCompanyOrganizationalChart)
            <div>
								@Html.EditorFor(model => model.SequenceInCompanyOrganizationalChart)
				            </div>
					</div>
		<div class="form-item">
			@Html.LabelFor(model => model.CreatedByUserID)
			<div class="editor-field">
			    @Html.DropDownListFor(model => model.CreatedByUserID, ((IEnumerable<SoftwareGrid.DataLogic.Models.User>)ViewBag.PossibleCreatedByUsers).Select(option => new SelectListItem {
			        Text = (option == null ? "None" : option.LastName), 
			        Value = option.UserID.ToString(),
			        Selected = (Model != null) && (option.UserID == Model.CreatedByUserID)
			    }), "Choose...")
			</div>
			</div>
				
		<div class="form-item">
            @Html.LabelFor(model => model.CreatedDate)
            <div>
								@Html.EditorFor(model => model.CreatedDate)
				            </div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.IsVerified)
            <div>
								@Html.EditorFor(model => model.IsVerified)
				            </div>
					</div>
		<div class="form-item">
			@Html.LabelFor(model => model.VerifiedByUserID)
			<div class="editor-field">
			    @Html.DropDownListFor(model => model.VerifiedByUserID, ((IEnumerable<SoftwareGrid.DataLogic.Models.User>)ViewBag.PossibleVerifiedByUsers).Select(option => new SelectListItem {
			        Text = (option == null ? "None" : option.LastName), 
			        Value = option.UserID.ToString(),
			        Selected = (Model != null) && (option.UserID == Model.VerifiedByUserID)
			    }), "Choose...")
			</div>
			</div>
				
		<div class="form-item">
            @Html.LabelFor(model => model.VerificationDate)
            <div>
								@Html.EditorFor(model => model.VerificationDate)
				            </div>
					</div>
	
		<div class="form-item">
			<div class="button_bar clearfix">
				<button class="green" type="submit">
						<span>Submit</span>
				</button>
			</div>
		</div>
	</fieldset>
