

//*********************************************************
//
//    Copyright (c) SoftwareGrid LLC. All rights reserved.
//	  Contact: Faisal Alam, sal@softwaregrid.com
//	  http://www.softwaregrid.com
//
//*********************************************************

using System;
using System.ComponentModel.DataAnnotations;
using SoftwareGrid.DataLogic.Attributes;

namespace SoftwareGrid.DataLogic.Models
{
  #region Applicant Profile and Detail Resume Builder

    public class Applicant
    {
        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantID { get; set; }
        //Auto Generated and Unique ID

        [Display(Name = "Display ID")]
        [StringLength(75)]
        [IncludeInList(Sequence = 1, AllowSearch = true, Width=5, AllowWidthInPercentage=true)]
        public String ApplicantDisplayId { get; set; }
        //Fazlur Consultation - Must be unique, auto generated by Date - sample (ATS-YYMM-MMSS1) 

        [Required(ErrorMessage = "First Name is required")]
        [Display(Name = "First Name")]
        [IncludeInList(IncludeInGrid =  false, AllowSearch = true)]
        [StringLength(100)]
        public String FirstName { get; set; }

        [Display(Name = "Middle Name")]
        [StringLength(100)]
        public String MiddleName { get; set; }

        [Display(Name = "Last Name")]
        [StringLength(100)]
        [IncludeInList(IncludeInGrid =  false, AllowSearch = true)]
        public String LastName { get; set; }

        [Display(Name = "Full Name")]
        [StringLength(150)]
        [IncludeInList(Sequence = 2, Width = 20, AllowWidthInPercentage = true, AllowSearch = false)]
        public String FullName { get; set; }

        [Display(Name = "Job Title")]
        [StringLength(100)]
        [IncludeInList(Sequence = 3, AllowSorting = true, Width = 15, AllowWidthInPercentage = true, AllowSearch = false)]
        public String JobTitle { get; set; }
        
        [ForeignKey("ContactProfessionType")]
        [Display(Name = "Primary Professional Category")]
        [IncludeInList(IncludeInGrid = false, AllowSearch = true)]
        public Int32? ContactProfessionTypeID { get; set; }

        [ForeignKey("ExperienceLevelCategory")]
        [Display(Name = "Experience Level")]
        [IncludeInList(IncludeInGrid = false, AllowSearch = true)]
        public Int32? ExperienceLevelCategoryID { get; set; }

        [Display(Name = "Professional Summary")]
        [StringLength(3000)]
        [DataType(DataType.Html)]
        [IncludeInList(Sequence = 4, AllowSearch = true)]// this is custom look with 500 words then ...
        public String ProfessionalSummary { get; set; }

        [Display(Name = "Years Of Experience")]
        public Double YearsOfExperience { get; set; }

        [Display(Name = "Address")]
        [StringLength(300)]
        public String Address { get; set; }

        [Display(Name = "City")]
        [StringLength(100)]
        [IncludeInList(Sequence = 5, AllowSearch = true, Width = 10, AllowWidthInPercentage = true)]
        public String City { get; set; }

        [Display(Name = "Country")]
        [ForeignKey("Country")]
        [IncludeInList(Sequence = 7, Width = 10, AllowWidthInPercentage = true, AllowSearch = true)]
        public Int32? CountryID { get; set; }

        [ForeignKey("State")]
        [Display(Name = "State")]
        [IncludeInList(Sequence = 6, AllowSorting = true, Width = 10, AllowSearch = true)]
        public Int32? StateID { get; set; }

        [Display(Name = "Zip Code")]
        [StringLength(50)]
        public String ZipCode { get; set; }

        [Display(Name = "Phone")]
        [StringLength(100)]
        [DataType(DataType.PhoneNumber)]
        [IncludeInList(Sequence = 8, Width = 10, AllowWidthInPercentage = true, AllowSearch = false)]
        public String Phone { get; set; }

        [Display(Name = "Email Address")]
        [StringLength(150)]
        [DataType(DataType.EmailAddress)]
        [RegularExpression(@"\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*", ErrorMessage = "Email address is not valid")]
        [IncludeInList(Sequence = 9, Width = 15, AllowWidthInPercentage = true)]
        public String EmailAddress { get; set; }

        [Display(Name = "Is Email Subscriber ")]
        public Boolean IsEmailSubscriber { get; set; }

        [Display(Name = "Is Email Validated ")]
        [DataType("Verified")]
        public Boolean IsEmailValidated { get; set; }
       

        [Display(Name = "Nationality")]
        [ForeignKey("Nationality")]
        public Int32? NationalityID { get; set; }

        [Display(Name = "Visa Information")]
        [StringLength(100)]
        public String VisaInformation { get; set; }
       

        [Display(Name = "Word Resume")]
        public Byte[] WordResume { get; set; }
    

        [Display(Name = "Copy Paste Resume")]
        [MaxLength]
        [DataType(DataType.Html)]
        public String CopyPasteResume { get; set; }


        [Display(Name = "Photo")]
        public Byte[] Photo { get; set; }
       

        [Display(Name = "Remarks About Applicant")]
        [StringLength(500)]
        public String RemarksAboutApplicant { get; set; }
 

        [Display(Name = "Shared With All Recruiters")]
        public Boolean IsShared { get; set; }

        [ForeignKey("ApplicantAvailabilityStatusCategory")]
        [Display(Name = "Applicant Availability Status")]
        [IncludeInList(Sequence = 8, Width = 10,AllowWidthInPercentage=true,AllowSearch=true)]
        public Int32 ApplicantAvailabilityStatusCategoryID { get; set; }
        

        [Display(Name = "Available From Date")]
        [DataType(DataType.DateTime)]
        public DateTime? AvailableFromDate { get; set; }

        [Required]
        [ForeignKey("ApplicantSourceCategory")]
        [Display(Name = "Applicant Source Info")]
        [IncludeInList(IncludeInGrid = false, AllowSearch = true)]
        public Int32 ApplicantSourceCategoryID { get; set; }

        [Display(Name = "Created By")]
        [ForeignKey("CreatedByUser")]
        public Int32 CreatedByUserID { get; set; }
             

        [Display(Name = "Created Date")]
        [DataType(DataType.Date)]
        public DateTime CreatedDate { get; set; }
    

        [Display(Name = "Last Update Date")]
        [DataType(DataType.Date)]
        public DateTime LastUpdateDate { get; set; }

        
        [Display(Name = "Is Resume Verified")]
        [DataType ("Verified")]
        public Boolean IsVerified { get; set; }
        
        [Display(Name = "Verified By")]
        [ForeignKey("VerifiedByUser")]
        public Int32? VerifiedByUserID { get; set; }

        [Display(Name = "Verification Date")]
        [DataType(DataType.Date)]
        public DateTime? VerificationDate { get; set; }

        [Display(Name = "Is Deleted")]
        public Boolean IsDeleted { get; set; }
        //soft delete, show in "Deleted Applicant List," deleted applicant won't show in regular search

        public virtual User CreatedByUser { get; set; }
        public virtual User VerifiedByUser { get; set; }
        public virtual ApplicantSourceCategory ApplicantSourceCategory { get; set; }
        public virtual ApplicantAvailabilityStatusCategory ApplicantAvailabilityStatusCategory { get; set; }
        public virtual Country Country { get; set; }
        public virtual Country Nationality { get; set; }
        public virtual State State { get; set; }
        public virtual ExperienceLevelCategory ExperienceLevelCategory { get; set; }
        public virtual ContactProfessionType ContactProfessionType { get; set; }

       
    }
    public class ApplicantAdditionalInfo
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantAdditionalInfoID { get; set; }

        [Required]
        [ForeignKey("Applicant")]
        public Int32 ApplicantID { get; set; }

        [Display(Name = "Date Of Birth")]
        [DataType(DataType.DateTime)]
        public DateTime? DateOfBirth { get; set; }
        //[Display(Name="Age As Of Today")]gftugru7

        [ForeignKey("EthnicBackground")]
        [Display(Name = "Ethnic Background")]
        public Int32? EthnicBackgroundCategoryID { get; set; }

        [ForeignKey("VeteranCategory")]
        [Display(Name = "Veteran")]
        public Int32? VeteranCategoryID { get; set; }

        [ForeignKey("MaritalStatus")]
        [Display(Name = "Marital Status")]
        public Int32? MaritalStatusID { get; set; }

        [ForeignKey("BloodGroup")]
        [Display(Name = "Blood Group")]
        public Int32? BloodID { get; set; }

        [ForeignKey("Gender")]
        [Display(Name = "Gender")]
        public Int32? GenderID { get; set; }

        [ForeignKey("Religion")]
        [Display(Name = "Religion")]
        public Int32? ReligionID { get; set; }

        [Display(Name = "Height")]
        [StringLength(50)]
        public String Height { get; set; }

        [Display(Name = "Weight")]
        [StringLength(50)]
        public String Weight { get; set; }
                 
        [Display(Name = "Social Security Number Or Personl Tax ID Number")]
        [StringLength(50)]
        public String SocialSecurityOrTaxNumber { get; set; }
        //data field can be encripted

        [Display(Name = "National Identification Number")]
        [StringLength(50)]
        public String NationalIdentificationNumber { get; set; }

        [Display(Name = "Current Salary")]
        [DataType(DataType.Currency)]
        public String CurrentSalary { get; set; }
                      
        [Display(Name = "Expected Salary")]
        [DataType(DataType.Currency)]
        public String ExpectedSalary { get; set; }
  
        [ForeignKey("Currency")]
        public Int32? CurrencyID { get; set; }

        [Display(Name = "Salary Type")]
        [ForeignKey("SalaryRateType")]
        public Int32? SalaryRateTypeID { get; set; }

        [Display(Name = "LinkedIn Profile Address")]
        [StringLength(150)]
        public String LinkedInProfileAddress { get; set; }

        [Display(Name = "Personal Blog Address")]
        [StringLength(150)]
        public String PersonalBlogAddress { get; set; }

        [Display(Name = "Facebook Profile Address")]
        [StringLength(150)]
        public String FacebookProfileAddress { get; set; }

        [Display(Name = "Twitter Address")]
        [StringLength(150)]
        public String TwitterAddress { get; set; }

        [Display(Name = "GooglePlus Address")]
        [StringLength(150)]
        public String GooglePlusAddress { get; set; }

        [Display(Name = "Willing To Travel in Percentage")]
        [DataType("Percent")]
        public Double WillingToTravelPercentage { get; set; }

        [ForeignKey("EmploymentType")]
        [Display(Name = "Preferred Employment Type")]
        public Int32? EmploymentTypeID { get; set; }


        public virtual Applicant Applicant { get; set; }
        public virtual BloodGroup BloodGroup { get; set; }
        public virtual Country Country { get; set; }
        public virtual State State { get; set; }
        public virtual EthnicBackground EthnicBackground { get; set; }
        public virtual Gender Gender { get; set; }
        public virtual MaritalStatus MaritalStatus { get; set; }
        public virtual Religion Religion { get; set; }
        public virtual EmploymentType EmploymentType { get; set; }
        public virtual Currency Currency { get; set; }
        public virtual VeteranCategory VeteranCategory { get; set; }
        public virtual SalaryRateType SalaryRateType { get; set; }
    }
    public class ApplicantSkillsExpertise
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantSkillsExpertiseID { get; set; }

        [Required]
        [ForeignKey("Applicant")]
        public Int32 ApplicantID { get; set; }

        [ForeignKey("SkillsExpEduCategory")]
        public Int32? SkillsExpEduCategoryID { get; set; }
        //show in a treeview

        [Required]
        [Display(Name = "Skills Expertise Education")]
        [ForeignKey("SkillsExpEdu")]
        public Int32 SkillsExpEduID { get; set; }

        [Display(Name = "Years Of Experience")]
        public Double YearsOfExperience { get; set; }
     

        [Display(Name = "Last Used Date")]
        [DataType(DataType.Date)]
        public DateTime? LastUsedDate { get; set; }

        [Display(Name = "Display Sequence")]
        public Double DisplaySequence { get; set; }

        [ForeignKey("ManagerRatingScale")]
        [DataType("Rating")]
        [Display(Name = "Rating by Recruiter")]
        public Int32? ManagerRatingScaleID { get; set; }

        [Display(Name = "Is  Verified ")]
        [IncludeInList(Sequence = 7, AllowSorting = false, Width = 100)]
        [DataType("Verified")]
        public Boolean IsVerified { get; set; }

        [Display(Name = "Verified By")]
        [ForeignKey("VerifiedByUser")]
        public Int32? VerifiedByUserID { get; set; }

        [Display(Name = "Verification Date")]
        [DataType(DataType.Date)]
        public DateTime? VerificationDate { get; set; }

        public virtual User VerifiedByUser { get; set; }
        public virtual Applicant Applicant { get; set; }
        public virtual SkillsExpEdu SkillsExpEdu { get; set; }
        public virtual SkillsExpEduCategory SkillsExpEduCategory { get; set; }
        public virtual RatingScale ManagerRatingScale { get; set; }
        public virtual User User { get; set; }

    }
    public class ApplicantEduCertLicense
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantEduCertLicenseID { get; set; }

        [Required]
        [ForeignKey("Applicant")]
        public Int32 ApplicantID { get; set; }

        [ForeignKey("SkillsExpEduCategory")]
        public Int32? SkillsExpEduCategoryID { get; set; }
        //show Education, Certification, License Info category only

        [Required]
        [Display(Name = "Skills Expertise Education")]
        [ForeignKey("SkillsExpEdu")]
        public Int32 SkillsExpEduID { get; set; }


        [Display(Name = "Title If Not Listed Above")]
        [StringLength(75)]
        public String Title { get; set; }
     
        [Display(Name = "Attended From Date")]
        [DataType(DataType.Date)]
        public DateTime? AttendedFromDate { get; set; }

        [Display(Name = "Attended To Date")]
        [DataType(DataType.Date)]
        public DateTime? AttendedToDate { get; set; }

        [Display(Name = "Institute Or University Name")]
        [StringLength(100)]
        [IncludeInList(Sequence = 5, AllowSorting = false, Width = 100)]
        public String InstituteName { get; set; }

        [Display(Name = "Country")]
        [ForeignKey("Country")]
        [IncludeInList(Sequence = 6, AllowSorting = false, Width = 100)]
        public Int32? CountryID { get; set; }

        [Display(Name = "State")]
        [ForeignKey("State")]
        public Int32? StateID { get; set; }

        [Display(Name = "City")]
        [StringLength(150)]
        [IncludeInList(Sequence = 6, AllowSorting = false, Width = 100)]
        public String City { get; set; }

        [Display(Name = "Brief Description")]
        [StringLength(500)]
        [DataType(DataType.Html)]
        public String BriefDescription { get; set; }

        [Display(Name = "Certification Issue Date")]
        [DataType(DataType.Date)]
        [IncludeInList(Sequence = 4, AllowSorting = false, Width = 100)]
        public DateTime? CertificationIssueDate { get; set; }

        [Display(Name = "License Expiration Date")]
        [DataType(DataType.Date)]
        [IncludeInList(Sequence = 5, AllowSorting = false, Width = 100)]
        public DateTime? LicenseExpirationDate { get; set; }

        [Display(Name = "Is  Verified ")]
        [IncludeInList(Sequence = 7, AllowSorting = false, Width = 100)]
        [DataType("Verified")]
        public Boolean IsVerified { get; set; }

        [Display(Name = "Verified By")]
        [ForeignKey("VerifiedByUser")]
        public Int32? VerifiedByUserID { get; set; }

        [Display(Name = "Verification Date")]
        [DataType(DataType.Date)]
        public DateTime? VerificationDate { get; set; }


        public virtual User VerifiedByUser { get; set; }
        public virtual Applicant Applicant { get; set; }
        public virtual SkillsExpEdu SkillsExpEdu { get; set; }
        public virtual SkillsExpEduCategory SkillsExpEduCategory { get; set; }
        public virtual Country Country { get; set; }
        public virtual State State { get; set; }

    }
    public class ApplicantExperience
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantExperienceID { get; set; }

        [Required]
        [ForeignKey("Applicant")]
        public Int32 ApplicantID { get; set; }

        [Required(ErrorMessage = "Employer Name is required")]
        [Display(Name = "Employer Name")]
        [StringLength(100)]
        [IncludeInList(Sequence = 1, AllowSorting = false, Width = 100)]
        public String EmployerName { get; set; }

        [Display(Name = "Employer Website Address")]
        [StringLength(100)]
        public String EmployerWebsite { get; set; }

        [Required(ErrorMessage = "Job Title is required")]
        [Display(Name = "Job Title")]
        [StringLength(100)]
        [IncludeInList(Sequence = 4, AllowSorting = false, Width = 100)]
        public String JobTitle { get; set; }

        [Display(Name = "Is Current Job")]
        public Boolean IsCurrentJob { get; set; }

        [Display(Name = "Date From")]
        [DataType(DataType.Date)]
        [IncludeInList(Sequence = 5, AllowSorting = false, Width = 100)]
        public DateTime? DateFrom { get; set; }

        [Display(Name = "Date To")]
        [DataType(DataType.Date)]
        [IncludeInList(Sequence = 6, AllowSorting = false, Width = 100)]
        public DateTime? DateTo { get; set; }

        [Display(Name = "Experience Month Year")]
        [IncludeInList(Sequence = 8, AllowSorting = false, Width = 100)]
        public Double? ExperienceMonthYear { get; set; }
        //auto calculate from to and from address

        [ForeignKey("Country")]
        [Display(Name = "Country")]
        [IncludeInList(Sequence = 3, AllowSorting = false, Width = 100)]
        public Int32? CountryID { get; set; }

        [ForeignKey("State")]
        [Display(Name = "State")]
        public Int32? StateID { get; set; }
        
        [Display(Name = "City")]
        [StringLength(150)]
        [IncludeInList(Sequence = 2, AllowSorting = false, Width = 100)]
        public String City { get; set; }
   
        [Display(Name = "Gross Salary")]
        [StringLength(100)]
        public String GrossSalary { get; set; }

        [Display(Name = "Job Description Including Project Info")]
        [MaxLength(5000)]
        [DataType(DataType.Html)]
        public String JobDescription { get; set; }

        [Display(Name = "Employment Leave Reason")]
        [ForeignKey("EmploymentLeaveReasonCategory")]
        public Int32? EmploymentLeaveReasonCategoryID { get; set; }

        [Display(Name = "Is  Verified ")]
        [IncludeInList(Sequence = 7, AllowSorting = false, Width = 100)]
        [DataType("Verified")]
        public Boolean IsVerified { get; set; }
        
        [Display(Name = "Verified By")]
        [ForeignKey("VerifiedByUser")]
        public Int32? VerifiedByUserID { get; set; }

        [Display(Name = "Verificion Date")]
        [DataType(DataType.Date)]
        public DateTime? VerificationDate { get; set; }

        public virtual User VerifiedByUser { get; set; }
        public virtual Applicant Applicant { get; set; }
        public virtual EmploymentLeaveReasonCategory EmploymentLeaveReasonCategory { get; set; }
        public virtual State State { get; set; }
        public virtual Country Country { get; set; }

    } 
    public class ApplicantAdditionalAddress
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantAdditionalAddressID { get; set; }

        [Required]
        [ForeignKey("Applicant")]
        public Int32 ApplicantID { get; set; }

        [Display(Name = "Address Line1")]
        [StringLength(256)]
        [IncludeInList(Sequence = 2, IncludeInGrid =  true, AllowSorting = true, Width = 20, AllowSearch = false)]
        public String AddressLine1 { get; set; }

        [Display(Name = "Address Line2")]
        [StringLength(256)]
        public String AddressLine2 { get; set; }

        [Display(Name = "Post Office Box Number")]
        public Int32 PostBoxNumber { get; set; }

        [Display(Name = "City")]
        [StringLength(128)]
        [IncludeInList(Sequence = 3, IncludeInGrid =  true, AllowSorting = true, Width = 10, AllowSearch = false)]
        public String City { get; set; }

        [ForeignKey("Country")]
        [Display(Name = "Country")]
        [IncludeInList(Sequence = 5, IncludeInGrid =  true, AllowSorting = true, Width = 10, AllowSearch = false)]
        public Int32? CountryID { get; set; }

        [ForeignKey("State")]
        [Display(Name = "State")]
        [IncludeInList(Sequence = 4, IncludeInGrid =  true, AllowSorting = true, Width = 10, AllowSearch = false)]
        public Int32? StateID { get; set; }

        [Display(Name = "Zip Code")]
        [StringLength(16)]
        public String ZipCode { get; set; }

        [Display(Name = "Home Phone")]
        [StringLength(50)]
        [DataType(DataType.PhoneNumber)]
        [IncludeInList(Sequence = 6, IncludeInGrid =  true, AllowSorting = true, Width = 10, AllowSearch = false)]
        public String HomePhone { get; set; }

        [Display(Name = "Mobile Phone")]
        [StringLength(50)]
        [DataType(DataType.PhoneNumber)]
        public String MobilePhone { get; set; }

        [Display(Name = "Personal Email")]
        [StringLength(128)]
        [DataType(DataType.EmailAddress)]
        [IncludeInList(Sequence = 7, IncludeInGrid =  true, AllowSorting = true, Width = 10, AllowSearch = false)]
        [RegularExpression(@"\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*", ErrorMessage = "Email address is not valid")]
        public String PersonalEmail { get; set; }

        [Display(Name = "Is Primary Contact")]
        [IncludeInList(Sequence = 8, IncludeInGrid =  true, AllowSorting = true, Width = 10, AllowSearch = false)]
        public Boolean IsPrimaryConatact { get; set; }

        public virtual Applicant Applicant { get; set; }
        public virtual Country Country { get; set; }
        public virtual State State { get; set; }

    }
    
    public class ApplicantWorkReferenceRecommendation
    {
        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantWorkReferenceRecommendationID { get; set; }

        [Required]
        [ForeignKey("Applicant")]
        public Int32 ApplicantID { get; set; }

        [ForeignKey("ApplicantExperience")]
        [Display(Name = "Select Experience From List")]
        public Int32? ApplicantExperienceID { get; set; }

        [Display(Name = "Company Name")]
        [StringLength(50)]
        public String CompanyName { get; set; }
        //auto populate from selected experience employer, or can add if not listed

        [Required(ErrorMessage = "First Name is required")]
        [Display(Name = "First Name")]
        [StringLength(250)]
        public String FirstName { get; set; }

        [Required(ErrorMessage = "Last Name is required")]
        [Display(Name = "Last Name")]
        [StringLength(250)]
        public String LastName { get; set; }

        [Display(Name = "Job Title")]
        [StringLength(50)]
        public String JobTitle { get; set; }

        [Display(Name = "Office Phone")]
        [StringLength(50)]
        [DataType(DataType.PhoneNumber)]
        public String OfficePhone { get; set; }

        [Display(Name = "Mobile Number")]
        [StringLength(50)]
        public String MobileNumber { get; set; }

        [Display(Name = "Email Address")]
        [StringLength(50)]
        [DataType(DataType.EmailAddress)]
        [RegularExpression(@"\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*", ErrorMessage = "Email address is not valid")]
        public String Email { get; set; }

        [Display(Name = "Recommendation Info")]
        [StringLength(1000)]
        [DataType(DataType.Html)]
        public String RecommendationInfo { get; set; }

        [Display(Name = "Show Or Hide Recommendation")]
        public Boolean ShowOrHideRecommendation { get; set; }

        [Display(Name = "Is Reference Verified")]
        [DataType ("Verified")]
        public Boolean IsVerified { get; set; }

        [Display(Name = "Verified By")]
        [ForeignKey("VerifiedByUser")]
        public Int32? VerifiedByUserID { get; set; }

        [Display(Name = "Verification Date")]
        [DataType(DataType.Date)]
        public DateTime? VerificationDate { get; set; }

        public virtual User VerifiedByUser { get; set; }
        public virtual Applicant Applicant { get; set; }
        public virtual ApplicantExperience ApplicantExperience { get; set; }

    }
   
 #endregion

  #region Passport, visa, driver license, Disability, Security clearance
       
    public class ApplicantDriverLicense
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantDriverLicenseID { get; set; }

        [Required]
        [ForeignKey("Applicant")]
        public Int32 ApplicantID { get; set; }

        [Required(ErrorMessage = "Driver License Category is required")]
        [Display(Name = "Driver License Category")]
        [ForeignKey("DriverLicense")]
        public Int32? DriverLicenseID { get; set; }

        [Display(Name = "License Number")]
        [StringLength(150)]
        public String LicenseNumber { get; set; }

        [Required]
        [ForeignKey("Country")]
        [Display(Name = "Country")]
        public Int32? CountryID { get; set; }

        [ForeignKey("State")]
        [Display(Name = "State")]
        public Int32? StateID { get; set; }

        [Display(Name = "City Name")]
        [StringLength(150)]
        public String City { get; set; }

        [Display(Name = "Issue Date")]
        [DataType(DataType.Date)]
        public DateTime IssueDate { get; set; }

        [Display(Name = "Expiration Date")]
        [DataType(DataType.Date)]
        public DateTime ExpireDate { get; set; }

        //[Display(Name="Valid For Days")]
        //public Int32 ValidForDays { get; set; }
        //need to write a separte functions for this, or use JavaScript functions to calculate the days

        [Display(Name = "Is  Verified ")]
        [IncludeInList(Sequence = 7, AllowSorting = false, Width = 100)]
        [DataType("Verified")]
        public Boolean IsVerified { get; set; }

        [Display(Name = "Verified By")]
        [ForeignKey("VerifiedByUser")]
        public Int32 VerifiedByUserID { get; set; }

        [Display(Name = "Verificion Date")]
        [DataType(DataType.Date)]
        public DateTime VerificationDate { get; set; }

        public virtual User VerifiedByUser { get; set; }
        public virtual Applicant Applicant { get; set; }
        public virtual DriverLicense DriverLicense { get; set; }
        public virtual Country Country { get; set; }
        public virtual State State { get; set; }

    }
    public class ApplicantPassportInfo
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantPassportInfoID { get; set; }

        [Required]
        [ForeignKey("Applicant")]
        public Int32 ApplicantID { get; set; }

        [Required(ErrorMessage = "Nationality is required")]
        [Display(Name = "Nationality")]
        [ForeignKey("NationalityCountry")]
        public Int32 NationalityCountryID { get; set; }

        [Required(ErrorMessage = "Passport Number is required")]
        [Display(Name = "Passport Number")]
        [StringLength(50)]
        public String PassportNumber { get; set; }

        [Display(Name = "Passport Type")]
        [StringLength(100)]
        public String PassportType { get; set; }

        [Display(Name = "Profession in Passport")]
        [StringLength(100)]
        public String PassportProfession { get; set; }

        [Display(Name = "Issuance City")]
        [StringLength(100)]
        public String IssuanceCity { get; set; }

        [ForeignKey("IssuanceCountry")]
        [Display(Name = "Issuance Country")]
        public Int32 IssuanceCountryID { get; set; }

        [ForeignKey("State")]
        [Display(Name = "Issuance State")]
        public Int32? StateID { get; set; }

        [Required(ErrorMessage = "Issue Date is required")]
        [Display(Name = "Issue Date")]
        [DataType(DataType.Date)]
        public DateTime IssueDate { get; set; }

        [Required(ErrorMessage = "Expire Date is required")]
        [Display(Name = "Expiration Date")]
        [DataType(DataType.Date)]
        public DateTime ExpireDate { get; set; }

        [Display(Name = "Is  Verified ")]
        [IncludeInList(Sequence = 7, AllowSorting = false, Width = 100)]
        [DataType("Verified")]
        public Boolean IsVerified { get; set; }

        [Display(Name = "Verified By")]
        [ForeignKey("VerifiedByUser")]
        public Int32 VerifiedByUserID { get; set; }

        [Display(Name = "Verificion Date")]
        [DataType(DataType.Date)]
        public DateTime VerificationDate { get; set; }

        public virtual User VerifiedByUser { get; set; }
        public virtual Applicant Applicant { get; set; }
        public virtual Country IssuanceCountry { get; set; }
        public virtual Country NationalityCountry { get; set; }
        public virtual State State { get; set; }

        //[Display(Name="Valid For Days")], public Int32 ValidForDays { get; set; }auto count based the expiration date and todays date 


    }
    public class ApplicantSecurityClearance
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantSecurityClearanceID { get; set; }

        [Required]
        [ForeignKey("Applicant")]
        public Int32 ApplicantID { get; set; }

        [Required(ErrorMessage = "Security Clearance Category is required")]
        [Display(Name = "Security Clearance Category")]
        [ForeignKey("SecurityClearance")]
        public Int32 SecurityClearanceID { get; set; }

        [Display(Name = "Certificate Number")]
        [StringLength(200)]
        public String CertificateNumber { get; set; }

        [Display(Name = "Certificate Issue Date")]
        [DataType(DataType.Date)]
        public DateTime CertificateIssueDate { get; set; }

        [Display(Name = "Certificate First Time Date")]
        [DataType(DataType.Date)]
        public DateTime CertificateFirstTimeDate { get; set; }

        [Display(Name = "Certification Expiration Date")]
        [DataType(DataType.Date)]
        public DateTime CertificationExpirationDate { get; set; }
        // Number of Days valid for

        [Display(Name = "Remarks")]
        [StringLength(500)]
        public String Remarks { get; set; }

        public virtual Applicant Applicant { get; set; }
        public virtual SecurityClearance SecurityClearance { get; set; }

    }
    public class ApplicantVisaInfo
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 AplicantVisaInfoID { get; set; }

        [Required]
        [ForeignKey("Applicant")]
        public Int32 ApplicantID { get; set; }

        [ForeignKey("VisaType")]
        [Display(Name = "Visa Category")]
        public Int32? VisaTypeID { get; set; }

        [Display(Name = "Visa Number")]
        [StringLength(50)]
        public String VisaNumber { get; set; }

        [Display(Name = "Immigration File Number")]
        [StringLength(300)]
        public String ImmigrationFileNumber { get; set; }

        [Display(Name = "Tracking Number")]
        [StringLength(50)]
        public String TrackingNumber { get; set; }

        [Display(Name = "Profession On Visa")]
        [StringLength(150)]
        public String ProfessionOnVisa { get; set; }

        [Display(Name = "Visa Application Date")]
        [DataType(DataType.DateTime)]
        public DateTime VisaApplicationDate { get; set; }

        [Display(Name = "Visa Fee Amount")]
        [DataType (DataType.Currency)]
        public Double VisaFee { get; set; }

        [Display(Name = "Issue Date")]
        [DataType(DataType.Date)]
        public DateTime IssueDate { get; set; }

        [Display(Name = "Expiration Date")]
        [DataType(DataType.Date)]
        public DateTime ExpirationDate { get; set; }

        [Display(Name = "Issued City")]
        [StringLength(150)]
        public String IssuedCity { get; set; }

        [ForeignKey("IssuanceCountry")]
        [Display(Name = "Issuance Country")]
        public Int32 IssuanceCountryID { get; set; }

        [ForeignKey("State")]
        [Display(Name = "Issuance State")]
        public Int32 StateID { get; set; }

        [Display(Name = "Entry By Date")]
        [DataType(DataType.Date)]
        public DateTime EntryByDate { get; set; }

        [Display(Name = "Spouse or Children Accompany Info")]
        [StringLength(350)]
        public String SpouseAccompanyInfo { get; set; }

        [Display(Name = "Cancellation Date")]
        [DataType(DataType.Date)]
        public DateTime CancellationDate { get; set; }

        [Required(ErrorMessage = "Is Current is required")]
        [Display(Name = "Is Current Visa")]
        public Boolean IsCurrent { get; set; }

        [Display(Name = "Remarks About Visa")]
        [StringLength(300)]
        public String RemarksAboutVisa { get; set; }

        [ForeignKey("VisaStatus")]
        [Display(Name = "Visa Stats")]
        public Int32? VisaStatusID { get; set; }

        [Display(Name = "Is Transferable Visa or NOC Available ")]
        public Boolean IsVisaTransferbleOrNocAvailable { get; set; }

        public virtual VisaStatus VisaStatus { get; set; }
        public virtual Visa VisaType { get; set; }
        public virtual State State { get; set; }
        public virtual Country IssuanceCountry { get; set; }
        public virtual Applicant Applicant { get; set; }

    }
    public class ApplicantDisability
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantDisabilityID { get; set; }
        //Hidden

        [Required]
        [ForeignKey("Applicant")]
        public Int32 ApplicantID { get; set; }
        //Hidden

        [Required(ErrorMessage = "Disability Category is required")]
        [Display(Name = "Disability Category")]
        [ForeignKey("Disability")]
        public Int32 DisabilityID { get; set; }
        //select from the dropdown

        [Display(Name = "Notes")]
        [StringLength(500)]
        public String Notes { get; set; }

        public virtual Applicant Applicant { get; set; }
        public virtual Disability Disability { get; set; }

    }

 #endregion

  #region Applicant Email Templates and Email Sync

    public class ApplicantEmail
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 AplicantEmailID { get; set; }

        [Required(ErrorMessage = "Comments By Name is required")]
        [Display(Name = "Send By")]
        [ForeignKey("EmailSendByUser")]
        public Int32 EmailSendByUserID { get; set; }

        [Display(Name = "Date Time")]
        [DataType(DataType.DateTime)]
        public DateTime SendDateTime { get; set; }

        [Required]
        [ForeignKey("EmailSendToApplicant")]
        public Int32 EmailSendToApplicantID { get; set; }
           

        [Display(Name = "Subject")]
        [StringLength(300)]
        public String EmailSubject { get; set; }

        [Display(Name = "Email Message")]
        [MaxLength]
        [DataType(DataType.Html)]
        public String EmailMessage { get; set; }

        //need mail merge option here in the body

        [Display(Name = "View Status")]
        public Boolean IsEmailViewedByApplicant { get; set; }

        public virtual Applicant EmailSendToApplicant { get; set; }
        public virtual User EmailSendByUser { get; set; }


    }
    public class ApplicantEmailTemplate
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantEmailTemplateID { get; set; }

        [Display(Name = "Template Created By")]
        [ForeignKey("TemplateCreatedByUser")]
        public Int32 TemplateCreatedByUserID { get; set; }

        [Display(Name = "Template Title")]
        [StringLength(500)]
        public String TemplateTitle { get; set; }

        [Display(Name = "Subject")]
        [StringLength(300)]
        public String EmailSubject { get; set; }

        [Display(Name = "Email Message")]
        [MaxLength]
        [DataType(DataType.Html)]
        public String EmailMessage { get; set; }

        public virtual User TemplateCreatedByUser { get; set; }

    }

  #endregion

  #region Applicant Documents Notes

    public class ApplicantNote
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantNoteID { get; set; }

        [Required]
        [ForeignKey("Applicant")]
        [Display(AutoGenerateField = false)]
        public Int32 ApplicantID { get; set; }


        [Required]
        [ForeignKey("WrittenByUser")]
        [Display(AutoGenerateField = false)]
        public Int32 WrittenByUserID { get; set; }
    

        [DataType(DataType.DateTime)]
        [Display(AutoGenerateField = false)]
        public DateTime DateTime { get; set; }
   
        [Required(ErrorMessage = "Notes is required")]
        [Display(Name = "Notes")]
        [StringLength(1000)]
        [DataType(DataType.Html)]
        public String Notes { get; set; }

        public virtual Applicant Applicant { get; set; }
        public virtual User WrittenByUser { get; set; }

    }
                  
    public class ApplicantDocument
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantDocumentID { get; set; }

        [Required]
        [ForeignKey("Applicant")]
        public Int32 ApplicantID { get; set; }
       
        [Display(Name = "Document Category")]
        [ForeignKey("ApplicantDocumentCategory")]
        public Int32? ApplicantDocumentCategoryID { get; set; }

        [Required(ErrorMessage = "Document Title is required")]
        [Display(Name = "Title")]
        [StringLength(200)]
        public String DocumentTitle { get; set; }

        [Display(Name = "Upload File")]
        //[DataType (DataType.UploadDocument)]
        public Byte[] DocumentFile { get; set; }

        [Display(Name = "Original File Name, Extension and Size")]
        [StringLength(150)]
        public String OriginalFileInfo { get; set; }
        //extract orginal file name, file extension and file size

        public virtual Applicant Applicant { get; set; }
        public virtual ApplicantDocumentCategory ApplicantDocumentCategory { get; set; }

    }
    
    public class ApplicantDocumentTracking
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantDocumentTrackingID { get; set; }

        [Required]
        [Display(AutoGenerateField = false)]
        [ForeignKey("Applicant")]
        public Int32 ApplicantID { get; set; }

        [Required(ErrorMessage = "Applicant Document Category is required")]
        [Display(Name = "Applicant Document Category")]
        [ForeignKey("ApplicantDocumentCategory")]
        public Int32 ApplicantDocumentCategoryID { get; set; }

        [Required(ErrorMessage = "Is Mandatory is required")]
        [Display(Name = "Is Mandatory")]
        public Boolean IsMandatory { get; set; }

        [Required(ErrorMessage = "Is Original Required is required")]
        [Display(Name = "Is Original Required")]
        public Boolean IsOriginalRequired { get; set; }
        
        [Display(Name = "Instruction")]
        [StringLength(500)]
        public String Instruction { get; set; }

        
        [Display(Name = "Applicant Document")]
        [ForeignKey("ApplicantDocument")]
        public Int32? ApplicantDocumentID { get; set; }
        //should be many selection
    
        [Required(ErrorMessage = "Is Received is required")]
        [Display(Name = "Is Received")]
        public Boolean IsReceived { get; set; }

        [Display(Name = "Receive Date")]
        [DataType(DataType.Date)]
        public DateTime ReceiveDate { get; set; }

        [Display(Name = "Is  Verified ")]
        [IncludeInList(Sequence = 7, AllowSorting = false, Width = 100)]
        [DataType("Verified")]
        public Boolean IsVerified { get; set; }

        [Display(Name = "Verified By")]
        [ForeignKey("VerifiedByUser")]
        public Int32 VerifiedByUserID { get; set; }

        [Display(Name = "Verificion Date")]
        [DataType(DataType.Date)]
        public DateTime VerificationDate { get; set; }

      
        [Display(Name = "Applicant Document Status Category")]
        [ForeignKey("ApplicantDocumentStatusCategory")]
        public Int32? ApplicantDocumentStatusCategoryID { get; set; }

        public virtual Applicant Applicant { get; set; }
        public virtual User VerifiedByUser { get; set; }
        public virtual ApplicantDocument ApplicantDocument { get; set; }//for many it should be list not virtual
        public virtual ApplicantDocumentCategory ApplicantDocumentCategory { get; set; }
        public virtual ApplicantDocumentStatusCategory ApplicantDocumentStatusCategory { get; set; }

    }
    
  #endregion

  #region Video, Photo Profile, Publish, viewer list and theme setup

    public class ApplicantPhotoPortfolio
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantPhotoPortfolioID { get; set; }

        [Required]
        [ForeignKey("Applicant")]
        public Int32 ApplicantID { get; set; }
        

        [Required(ErrorMessage = "Title is required")]
        [Display(Name = "Title")]
        [StringLength(100)]
        public String PortfolioTitle { get; set; }

        [Display(Name = "Brief Description")]
        [StringLength(500)]
        public String BriefDescription { get; set; }

        [Display(Name = "Upload File")]
        public Byte[] DocumentFile { get; set; }

        [Display(Name = "Original File Name, Extension and Size")]
        [StringLength(150)]
        public String OriginalFileInfo { get; set; }

        [Required(ErrorMessage = "Display In Profile is required")]
        [Display(Name = "Display In Profile Gallery ?")]
        public Boolean IsDisplayInProfile { get; set; }
       

        [Display(Name = "Display Sequence")]
        public Double DisplaySequence { get; set; }
        
        public virtual Applicant Applicant { get; set; }

    }
    public class ApplicantVideo
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantVideoID { get; set; }

        [Required]
        [ForeignKey("Applicant")]
        public Int32 ApplicantID { get; set; }

        [Display(Name = "Video Title")]
        [StringLength(150)]
        public String VideoTitle { get; set; }

        [Display(Name = "Video Description")]
        [StringLength(500)]
        public String BriefDescription { get; set; }

        [Display(Name = "YouTube Video Link or Title")]
        [StringLength(100)]
        public String YouTubeVideoLink { get; set; }

        [Display(Name = "Upload Video File")]
        public Byte[] VideoFile { get; set; }

        [Display(Name = "Original Video File Info")]
        [StringLength(150)]
        public String OriginalFileInfo { get; set; }

        [Display(Name = "Show Video In Published Portfolio ")]
        public Boolean IsDisplayInPortfolio { get; set; }

        [Required(ErrorMessage = "Upload Date is required")]
        [Display(Name = "Upload Date")]
        [DataType(DataType.Date)]
        public DateTime UploadDate { get; set; }
        //automatic date

        public virtual Applicant Applicant { get; set; }

    }
       
    public class ApplicantProfilePublish
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantProfilePublishID { get; set; }

        [Required]
        [ForeignKey("Applicant")]
        public Int32 ApplicantID { get; set; }

        [Display(Name = "Applicant Profile Theme")]
        [ForeignKey("ApplicantProfileThemeLibrary")]
        public Int32 ApplicantProfileThemeLibraryID { get; set; }

        [Display(Name = "Profile Web Address")]
        [StringLength(50)]
        public String WebUrl { get; set; }
        //must be unique

        [Display(Name = "Search Engine Optimization Tags")]
        [StringLength(1000)]
        public String SeoTag { get; set; }
        //auto generate from professional summary, skillset, location etc.

        [Required(ErrorMessage = "Start Publish Date is required")]
        [Display(Name = "Start Publish Date")]
        [DataType(DataType.Date)]
        public DateTime StartPublishDate { get; set; }

        [Display(Name = "End Publish Date")]
        [DataType(DataType.Date)]
        public DateTime EndPublishDate { get; set; }

        [Required(ErrorMessage = "Published By User is required")]
        [Display(Name = "Published By User")]
        [ForeignKey("PublishedByUser")]
        public Int32 PublishedByUserID { get; set; }
        //auto selected current user

        [Display(Name = "Is Currently Published ")]
        public Boolean IsCurrentlyPublish { get; set; }

        [Display(Name = "Is Premium Profile")]
        public Boolean IsPremiumProfile { get; set; }

        public virtual Applicant Applicant { get; set; }
        public virtual ApplicantProfileThemeLibrary ApplicantProfileThemeLibrary { get; set; }
        public virtual User PublishedByUser { get; set; }
    }
   
    public class ApplicantProfileViewer
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantProfileViewerID { get; set; }

        [Required]
        [ForeignKey("Applicant")]
        public Int32 ApplicantID { get; set; }

        [Required(ErrorMessage = "User is required")]
        [Display(Name = "Viewed By")]
        [ForeignKey("ViewedByUser")]
        public Int32 ViewedByUserID { get; set; }

        [Display(Name = "Date")]
        [DataType(DataType.Date)]
        public DateTime ViewDateTime { get; set; }

        public virtual Applicant Applicant { get; set; }
        public virtual User ViewedByUser { get; set; }

    }
    public class ApplicantProfileRequestList
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantProfileRequestListID { get; set; }

        [Required]
        [ForeignKey("Applicant")]
        public Int32 ApplicantID { get; set; }

        [Required]
        [Display(Name = "Requested By User")]
        [ForeignKey("RequestedByUser")]
        public Int32 RequestedByUserID { get; set; }
        //send email to assigned applicant recruiters or resume owners
        
        [Display(Name = "Date")]
        [DataType(DataType.Date)]
        public DateTime RequestDateTime { get; set; }

        public virtual Applicant Applicant { get; set; }
        public virtual User RequestedByUser { get; set; }

    }

    public class ApplicantProfileThemeLibrary
    {

        [Required(ErrorMessage = "Applicant Profile Theme is required")]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantProfileThemeLibraryID { get; set; }

        [Display(Name = "Name")]
        [StringLength(50)]
        public String Name { get; set; }

        [Display(Name = "Description")]
        [StringLength(350)]
        public String Description { get; set; }

    }

  #endregion

  #region Resume Data Widget or Block Access Security Management

    public class ApplicantProfileWidgetAccess
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantProfileWidgetAccessID { get; set; }

        [Required]
        [ForeignKey("Applicant")]
        public Int32 ApplicantID { get; set; }

        [Required]
        [Display(Name = "Select User")]
        [ForeignKey("ProfileAccessUser")]
        public Int32 ProfileAccessUserID { get; set; }

        [Display(Name = "Contact Widget")]
        public Boolean ContactInfoWidget { get; set; }

        [Display(Name = "Notes Widget")]
        public Boolean NoteWidget { get; set; }

        [Display(Name = "Documents Widget")]
        public Boolean DocumentWidget { get; set; }

        [Display(Name = "Profile Widget")]
        public Boolean ProfileWidget { get; set; }

        [Display(Name = "Passport Info Widget")]
        public Boolean PassportInfoWidget { get; set; }

        [Display(Name = "Driver License Widget")]
        public Boolean DriverLicenseWidget { get; set; }

        [Display(Name = "Visa Widget")]
        public Boolean VisaInfoWidget { get; set; }

        [Display(Name = "Personal Data Widget")]
        public Boolean AdditionalPersonalDataWidget { get; set; }

        [Display(Name = "Job Cart Widget")]
        public Boolean JobCartWidget { get; set; }

        [Display(Name = "Reference Info Widget")]
        public Boolean ReferenceInfoWidget { get; set; }

        [Display(Name = "Photo Profile Widget")]
        public Boolean PhotoProfileWidget { get; set; }

        [Display(Name = "Video Profile Widget")]
        public Boolean VideoProfileWidget { get; set; }

        [Display(Name = "Security Clearance Info Widget")]
        public Boolean SecurityClearanceInfoWidget { get; set; }

        [Display(Name = "Submission Report Widget")]
        public Boolean SubmissionReportWidget { get; set; }
        
        [Display(Name = "Social Network")]
        public Boolean SocialNetworkWidget { get; set; }

        [Display(Name = "Viewer List Widget")]
        public Boolean ViewerListWidget { get; set; }

        public virtual Applicant Applicant { get; set; }
        public virtual User ProfileAccessUser { get; set; }

    }
    public class ApplicantRecruitmentTeam
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantRecruitmentTeamID { get; set; }

        [Required]
        [ForeignKey("Applicant")]
        public Int32 ApplicantID { get; set; }

        [Display(Name = "Assign Recruiter")]
        [ForeignKey("AssignRecruiterUser")]
        public Int32? AssignRecruiterUserID { get; set; }

        [Required(ErrorMessage = "Is Primary Recruiter is required")]
        [Display(Name = "Is Primary Recruiter")]
        public Boolean IsPrimaryRecruiter { get; set; }

        [Display(Name = "Assign Date")]
        [DataType(DataType.Date)]
        public DateTime AssignDate { get; set; }

        [Required(ErrorMessage = "Is Removed is required")]
        [Display(Name = "Is Removed")]
        public Boolean IsRemoved { get; set; }
        //cant delete, only remove

        public virtual Applicant Applicant { get; set; }
        public virtual User AssignRecruiterUser { get; set; }
    }

  #endregion 
     
  #region Resume Folder Management

    public class ApplicantResumeFolder
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantResumeFolderID { get; set; }

        [Required(ErrorMessage = "Created By User is required")]
        [Display(Name = "Owner of Resume Folder")]
        public Int32 CreatedByUserID { get; set; }
        //recruiter based folder

        [Required(ErrorMessage = "Folder Name is required")]
        [Display(Name = "Resume Folder Name")]
        [StringLength(50)]
        public String FolderName { get; set; }

        [Display(Name = "Description")]
        [StringLength(500)]
        public String Description { get; set; }

        

        public virtual User CreatedByUser { get; set; }

    }
    public class ApplicantInResumeFolder
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantInResumeFolderID { get; set; }

        [Required]
        [ForeignKey("ApplicantResumeFolder")]
        public Int32 ResumeFolderID { get; set; }
        //Tree based - resume Name

        [Required]
        [ForeignKey("Applicant")]
        public Int32 ApplicantID { get; set; }
        //drag and drop applicant from grid to folder and job cart

        public virtual Applicant Applicant { get; set; }
        public virtual ApplicantResumeFolder ApplicantResumeFolder { get; set; }

    }

  #endregion

  #region  Resume Submission to Hiring Manager or Client

    public class ApplicantSubmissionInfo
    {
        
        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantSubmissionWithoutRequisitionID { get; set; }

        [Required]
        [ForeignKey("Applicant")]
        public Int32 ApplicantID { get; set; }

        [Required(ErrorMessage = "Submitted By User is required")]
        [Display(Name = "Submitted By")]
        [ForeignKey("SubmittedByUser")]
        public Int32 SubmittedByUserID { get; set; }

        [Required(ErrorMessage = "Submission Date is required")]
        [Display(Name = "Submission Date Time")]
        [DataType(DataType.DateTime)]
        public DateTime SubmissionDate { get; set; }

        [Display(Name = "Requisition")]
        [ForeignKey("Requisition")]
        public Int32? RequisitionID { get; set; }

        [Display(Name = "Submit To Client")]
        [ForeignKey("SubmitToCompany")]
        public Int32? SubmitToCompanyID { get; set; }

        [Display(Name = "Submit To Contact")]
        [ForeignKey("SubmitToContact")]
        public Int32? SubmitToContactID { get; set; }
              

        [Display(Name = "Submit To Hiring Manager")]
        [ForeignKey("SubmitToHiringManagerUser")]
        public Int32? SubmitToHiringManagerUserID { get; set; }

        
        [Display(Name = "Submission Notes")]
        [StringLength(1000)]
        public String SubmissionNotes { get; set; }

       
        [Display(Name = "Selection Status")]
        [ForeignKey("ApplicantSubmissionFeedbackCategory")]
        public Int32? ApplicantSubmissionFeedbackCategoryID { get; set; }

        public virtual Applicant Applicant { get; set; }
        public virtual User SubmittedByUser { get; set; }
        public virtual User SubmitToHiringManagerUser { get; set; }
        public virtual Company  SubmitToCompany { get; set; }
        public virtual Contact SubmitToContact { get; set; }
        public virtual Requisition Requisition { get; set; }
        public virtual ApplicantSubmissionFeedbackCategory ApplicantSubmissionFeedbackCategory { get; set; }

    }
    

 #endregion

  #region Preferred Location, Cost to the company, Privacy agreement

    public class ApplicantPreferredWorkLocation
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantPreferredWorkLocationID { get; set; }

        [Required]
        [ForeignKey("Applicant")]
        public Int32 ApplicantID { get; set; }

        [ForeignKey("Country")]
        public Int32? CountryID { get; set; }

        [ForeignKey("State")]
        public Int32? StateID { get; set; }

        [ForeignKey("City")]
        public Int32? CityID { get; set; }

        [Display(Name = "How Many Miles From the City")]
        public Double CityDistance { get; set; }

        public virtual Applicant Applicant { get; set; }
        public virtual Country Country { get; set; }
        public virtual State State { get; set; }
        public virtual City City { get; set; }
        public virtual Region Region { get; set; }
    }
    public class ApplicantDataPrivacyAcknowledgement
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantDataPrivacyAcknowledgementID { get; set; }
        //Hidden

        [Required]
        [ForeignKey("Applicant")]
        public Int32 ApplicantID { get; set; }
        //Hidden

        [Required]
        [ForeignKey("ApplicantDataPrivacyTemplate")]
        [Display(Name = "Data Privacy Acknowledgement")]
        public Int32 ApplicantDataPrivacyTemplateID { get; set; }
        //auto selected data privacy agreement, display in a box or pop up link

        [Required(ErrorMessage = "Applicant Must Agree")]
        [Display(Name = "Is Agreed ")]
        public Boolean IsAgreed { get; set; }

        [Display(AutoGenerateField = false)]
        [MaxLength]  //max limit data
        [DataType(DataType.Html)]
        public String ApplicantDataPrivacyAgreementInfo { get; set; }
        //insert copy of the agreement with applicant name, time and IP address

        [Required(ErrorMessage = "Agreement Date Time is required")]
        [Display(Name = "Agreement Date Time")]
        [DataType(DataType.DateTime)]
        public DateTime AgreementDateTime { get; set; }
        //auto current date

        public virtual Applicant Applicant { get; set; }
        public virtual ApplicantDataPrivacyTemplate ApplicantDataPrivacyTemplate { get; set; }


    }

    #endregion
        
    #region ats master data

    public class ApplicantSourceCategory
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantSourceCategoryID { get; set; }

        [Required(ErrorMessage = "Name is required")]
        [Display(Name = "Name")]
        [StringLength(100)]
        public String Name { get; set; }


    }
    public class ApplicantAvailabilityStatusCategory
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantAvailabilityStatusCategoryID { get; set; }

        [Required(ErrorMessage = "Name is required")]
        [Display(Name = "Name")]
        [StringLength(250)]
        public String Name { get; set; }


    }
    public class ApplicantSubmissionFeedbackCategory
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantSubmissionFeedbackCategoryID { get; set; }

        [Required(ErrorMessage = "Name is required")]
        [Display(Name = "Name")]
        [StringLength(100)]
        public String Name { get; set; }

    }
    public class ApplicantInterviewFeedbackCategory
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantInterviewFeedbackCategoryID { get; set; }

        [Required(ErrorMessage = "Name is required")]
        [Display(Name = "Name")]
        [StringLength(100)]
        public String Name { get; set; }


    }
    public class ApplicantRecruitmentCostCategory
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantRecruitmentCostCategoryID { get; set; }

        [Required(ErrorMessage = "Name is required")]
        [Display(Name = "Name")]
        [StringLength(50)]
        public String Name { get; set; }

        [Display(Name = "Cost Code")]
        [StringLength(50)]
        public String CostCode { get; set; }



    }
    public class ApplicantDataPrivacyTemplate
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantDataPrivacyTemplateID { get; set; }
        //auto generated

        [Required]
        [Display(Name = "Agreement Title")]
        [StringLength(100)]
        public String AgreementTitle { get; set; }


        [Required(ErrorMessage = "Applicant Data Privacy Agreement ID is required")]
        [Display(Name = "Data Privacy Agreement")]
        [MaxLength]
        [DataType(DataType.Html)]
        public String DataPrivacyAgreementInfo { get; set; }

        [Required(ErrorMessage = "Is Current is required")]
        [Display(Name = "Is Current")]
        public Boolean IsCurrent { get; set; }
        //only one can be true

    }
    
    public class ApplicantDocumentCategory
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantDocumentCategoryID { get; set; }

        [Required(ErrorMessage = "Name is required")]
        [Display(Name = "Name")]
        [StringLength(100)]
        public String Name { get; set; }

    }
    public class ApplicantDocumentStatusCategory
    {

        [Required]
        [Display(AutoGenerateField = false)]
        [Key]
        public Int32 ApplicantDocumentStatusCategoryID { get; set; }

        [Required(ErrorMessage = "Name is required")]
        [Display(Name = "Name")]
        [StringLength(100)]
        public String Name { get; set; }


    }
   

    #endregion 

}
 