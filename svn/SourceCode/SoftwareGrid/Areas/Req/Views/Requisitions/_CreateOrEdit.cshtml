
@model SoftwareGrid.DataLogic.Models.Requisition

@* This partial view defines form fields that will appear when creating and editing entities *@

	<fieldset>
		@Html.ValidationSummary()
		<div class="form-item">
			@Html.LabelFor(model => model.CreatedByUserID)
			<div class="editor-field">
			    @Html.DropDownListFor(model => model.CreatedByUserID, ((IEnumerable<SoftwareGrid.DataLogic.Models.User>)ViewBag.PossibleCreatedByUsers).Select(option => new SelectListItem {
			        Text = (option == null ? "None" : option.LastName), 
			        Value = option.UserID.ToString(),
			        Selected = (Model != null) && (option.UserID == Model.CreatedByUserID)
			    }), "Choose...")
			</div>
			</div>
				
		<div class="form-item">
            @Html.LabelFor(model => model.CreateDate)
            <div>
								@Html.EditorFor(model => model.CreateDate)
				            </div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.RequisitionDisplayId)
            <div>
								@Html.EditorFor(model => model.RequisitionDisplayId)
				            </div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.IsJdLibraryTemplate)
            <div>
								@Html.EditorFor(model => model.IsJdLibraryTemplate)
				            </div>
					</div>
		<div class="form-item">
			@Html.LabelFor(model => model.RequisitionJDLibraryCategoryID)
			<div class="editor-field">
			    @Html.DropDownListFor(model => model.RequisitionJDLibraryCategoryID, ((IEnumerable<SoftwareGrid.DataLogic.Models.RequisitionJDLibraryCategory>)ViewBag.PossibleRequisitionJDLibraryCategories).Select(option => new SelectListItem {
			        Text = (option == null ? "None" : option.Name), 
			        Value = option.RequisitionJDLibraryCategoryID.ToString(),
			        Selected = (Model != null) && (option.RequisitionJDLibraryCategoryID == Model.RequisitionJDLibraryCategoryID)
			    }), "Choose...")
			</div>
			</div>
				
		<div class="form-item">
            @Html.LabelFor(model => model.IsOrganizationPositionTemplate)
            <div>
								@Html.EditorFor(model => model.IsOrganizationPositionTemplate)
				            </div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.JobTitle)
            <div>
								@Html.EditorFor(model => model.JobTitle)
				            </div>
					
			<div class="required_tag"></div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.NumberOfOpenings)
            <div>
								@Html.EditorFor(model => model.NumberOfOpenings)
				            </div>
					</div>
		<div class="form-item">
			@Html.LabelFor(model => model.EmploymentTypeID)
			<div class="editor-field">
			    @Html.DropDownListFor(model => model.EmploymentTypeID, ((IEnumerable<SoftwareGrid.DataLogic.Models.EmploymentType>)ViewBag.PossibleEmploymentTypes).Select(option => new SelectListItem {
			        Text = (option == null ? "None" : option.Name), 
			        Value = option.EmploymentTypeID.ToString(),
			        Selected = (Model != null) && (option.EmploymentTypeID == Model.EmploymentTypeID)
			    }), "Choose...")
			</div>
			</div>
				
		<div class="form-item">
            @Html.LabelFor(model => model.EmploymentContractDuration)
            <div>
								@Html.EditorFor(model => model.EmploymentContractDuration)
				            </div>
					</div>
		<div class="form-item">
			@Html.LabelFor(model => model.ExperienceLevelCategoryID)
			<div class="editor-field">
			    @Html.DropDownListFor(model => model.ExperienceLevelCategoryID, ((IEnumerable<SoftwareGrid.DataLogic.Models.ExperienceLevelCategory>)ViewBag.PossibleExperienceLevelCategories).Select(option => new SelectListItem {
			        Text = (option == null ? "None" : option.Name), 
			        Value = option.ExperienceLevelCategoryID.ToString(),
			        Selected = (Model != null) && (option.ExperienceLevelCategoryID == Model.ExperienceLevelCategoryID)
			    }), "Choose...")
			</div>
			</div>
				
		<div class="form-item">
            @Html.LabelFor(model => model.HireByDate)
            <div>
								@Html.EditorFor(model => model.HireByDate)
				            </div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.SalaryRange)
            <div>
								@Html.EditorFor(model => model.SalaryRange)
				            </div>
					</div>
		<div class="form-item">
			@Html.LabelFor(model => model.CurrencyID)
			<div class="editor-field">
			    @Html.DropDownListFor(model => model.CurrencyID, ((IEnumerable<SoftwareGrid.DataLogic.Models.Currency>)ViewBag.PossibleCurrencies).Select(option => new SelectListItem {
			        Text = (option == null ? "None" : option.Name), 
			        Value = option.CurrencyID.ToString(),
			        Selected = (Model != null) && (option.CurrencyID == Model.CurrencyID)
			    }), "Choose...")
			</div>
			</div>
				<div class="form-item">
			@Html.LabelFor(model => model.SalaryRateTypeID)
			<div class="editor-field">
			    @Html.DropDownListFor(model => model.SalaryRateTypeID, ((IEnumerable<SoftwareGrid.DataLogic.Models.SalaryRateType>)ViewBag.PossibleSalaryRateTypes).Select(option => new SelectListItem {
			        Text = (option == null ? "None" : option.Name), 
			        Value = option.SalaryRateTypeID.ToString(),
			        Selected = (Model != null) && (option.SalaryRateTypeID == Model.SalaryRateTypeID)
			    }), "Choose...")
			</div>
			</div>
				
		<div class="form-item">
            @Html.LabelFor(model => model.WorkAddress)
            <div>
								@Html.EditorFor(model => model.WorkAddress)
				            </div>
					</div>
		<div class="form-item">
			@Html.LabelFor(model => model.CountryID)
			<div class="editor-field">
			    @Html.DropDownListFor(model => model.CountryID, ((IEnumerable<SoftwareGrid.DataLogic.Models.Country>)ViewBag.PossibleCountries).Select(option => new SelectListItem {
			        Text = (option == null ? "None" : option.Name), 
			        Value = option.CountryID.ToString(),
			        Selected = (Model != null) && (option.CountryID == Model.CountryID)
			    }), "Choose...")
			</div>
			</div>
				<div class="form-item">
			@Html.LabelFor(model => model.StateID)
			<div class="editor-field">
			    @Html.DropDownListFor(model => model.StateID, ((IEnumerable<SoftwareGrid.DataLogic.Models.State>)ViewBag.PossibleStates).Select(option => new SelectListItem {
			        Text = (option == null ? "None" : option.Name), 
			        Value = option.StateID.ToString(),
			        Selected = (Model != null) && (option.StateID == Model.StateID)
			    }), "Choose...")
			</div>
			</div>
				
		<div class="form-item">
            @Html.LabelFor(model => model.City)
            <div>
								@Html.EditorFor(model => model.City)
				            </div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.ZipCode)
            <div>
								@Html.EditorFor(model => model.ZipCode)
				            </div>
					</div>
		
		<div class="form-item">
            @Html.LabelFor(model => model.JobDescription)
            <div>
								@Html.EditorFor(model => model.JobDescription)
				            </div>
					
			<div class="required_tag"></div>
					</div>
		<div class="form-item">
			@Html.LabelFor(model => model.RequisitionStatusCategoryID)
			<div class="editor-field">
			    @Html.DropDownListFor(model => model.RequisitionStatusCategoryID, ((IEnumerable<SoftwareGrid.DataLogic.Models.RequisitionStatusCategory>)ViewBag.PossibleRequisitionStatusCategories).Select(option => new SelectListItem {
			        Text = (option == null ? "None" : option.Name), 
			        Value = option.RequisitionStatusCategoryID.ToString(),
			        Selected = (Model != null) && (option.RequisitionStatusCategoryID == Model.RequisitionStatusCategoryID)
			    }), "Choose...")
			</div>
			</div>
			
		<div class="form-item">
			<div class="button_bar clearfix">
				<button class="green" type="submit">
						<span>Submit</span>
				</button>
			</div>
		</div>
	</fieldset>
